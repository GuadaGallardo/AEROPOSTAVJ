import pygame
from pygame.locals import *
import random
import sys
import os


# funciones varias

def cerrar_juego():
    pygame.quit()
    sys.exit()


def objeto_texto(texto, fuente, color):
    texto_objeto = fuente.render(texto, 1, color)
    texto_rect = texto_objeto.get_rect()
    return texto_objeto, texto_rect


def dibujar_boton(texto, color_texto, x, y, ancho, alto, color_activo, color_inactivo):
    mouse = pygame.mouse.get_pos()

    if x + ancho > mouse[0] > x and y + alto > mouse[1] > y:
        pygame.draw.rect(ventana, color_activo, (x, y, ancho, alto))
    else:
        pygame.draw.rect(ventana, color_inactivo, (x, y, ancho, alto))

    fuente = pygame.font.SysFont(None, 32)
    texto_sup, texto_rect = objeto_texto(texto, fuente, color_texto)
    texto_rect.center = ((x + (ancho / 2)), (y + (alto / 2)))
    ventana.blit(texto_sup, texto_rect)


# crear una funcion que dibuje texto en pantalla
def dibujar_texto_centrado(texto, fuente, color, superficie, x, y):
    texto_objeto = fuente.render(texto, 1, color)
    texto_rect = texto_objeto.get_rect()
    texto_rect.center = (x, y)
    superficie.blit(texto_objeto, texto_rect)
    return texto_rect


# crear una funcion que dibuje texto en pantalla
def dibujar_texto(texto, fuente, color, superficie, x, y):
    texto_objeto = fuente.render(texto, 1, color)
    texto_rect = texto_objeto.get_rect()
    texto_rect.topleft = (x, y)

    superficie.blit(texto_objeto, texto_rect)
    return texto_rect


# espera los eventos
def esperar_jugador():
    ejecutando = True
    while ejecutando != False:

        for evento in pygame.event.get():

            if evento.type == pygame.QUIT:
                cerrar_juego()
                return 10

            if evento.type == pygame.KEYDOWN:
                if evento.key == K_ESCAPE:  # Sale del juego al presionar ESCAPE
                    cerrar_juego()
                    return 10
                # teclas de respuesta del jugador 1
                elif evento.key == pygame.K_q:
                    ejecutando = False
                    return 0
                elif evento.key == pygame.K_w:
                    ejecutando = False
                    return 1
                elif evento.key == pygame.K_e:
                    ejecutando = False
                    return 2
                elif evento.key == pygame.K_r:
                    ejecutando = False
                    return 3
                # avanzar en las preguntas
                elif evento.key == pygame.K_s:
                    ejecutando = False
                    return 4
                # esblecer cantidad de jugadores
                elif evento.key == pygame.K_1:
                    ejecutando = False
                    return 5
                elif evento.key == pygame.K_KP1:
                    ejecutando = False
                    return 5
                elif evento.key == pygame.K_2:
                    ejecutando = False
                    return 6
                elif evento.key == pygame.K_KP2:
                    ejecutando = False
                    return 6
                # pausa musica
                elif evento.key == pygame.K_SPACE:
                    pausa_despausa_la_musica()

                # avanzar a la trivia
                elif evento.key == pygame.K_t:
                    ejecutando = False
                    return 8
                # menu
                elif evento.key == pygame.K_m:
                    ejecutando = False
                    return 9
                # teclas de respuesta del jugador 2
                elif evento.key == pygame.K_u:
                    ejecutando = False
                    return 11
                elif evento.key == pygame.K_i:
                    ejecutando = False
                    return 12
                elif evento.key == pygame.K_o:
                    ejecutando = False
                    return 13
                elif evento.key == pygame.K_p:
                    ejecutando = False
                    return 14
                elif evento.key == pygame.K_n:
                    ejecutando = False
                    return 15

                # cualquier otra tecla
                else:
                    return

def pausa_despausa_la_musica():
    global musica_sonando
    if musica_sonando == True:
        musica_sonando = False
        return pygame.mixer.music.pause()
    else:
        musica_sonando = True
        return pygame.mixer.music.unpause()

#def pausa_juego

'''
#crea un contador que decrece (timer)
def timer():
    contador, texto_timer = 10, '10'.rjust(3, "+") # justifica el texto en la cantidad de "caracteres" que se le da el segundo argumento
    pygame.time.set_timer(pygame.USEREVENT, 1000) # 1000 milisegundos equivalen a 1 segundo

    for evento in pygame.event.get():

        if evento.type == pygame.USEREVENT:
            contador -= 1
            texto_timer = str(contador).rjust(3) if contador > 0 else 'Fin!'
 #### como usarla ####
'''


# --------------------###################-------------------------------------##############
# funciones del juego trivia

def crear_lista_preguntas_cuestionario(diccionario, categoria):
    lista_de_preguntas = []
    for pregunta in diccionario[categoria]:
        # print(pregunta)
        lista_de_preguntas.append(pregunta)

    # print(lista_de_preguntas)

    random.shuffle(lista_de_preguntas, random.random)

    # print("desordenada aeronautica")
    # print(lista_de_preguntas)

    # tomo la cantidad de preguntas que necesito nada mas

    lista_preg_test = []

    for pregunta in lista_de_preguntas:
        if len(lista_preg_test) < 5:
            lista_preg_test.append(pregunta)
        else:
            break

    return lista_preg_test


def resolver(diccionario, categoria, pregunta, respuesta):
    if diccionario[categoria][pregunta]["correcta"] == respuesta:
        return True
    else:
        return False

def dibujar_pregunta(categoria, pregunta_id, turno):

    #evaluo que tan larga es la pregunta
    pregunta = preguntas[categoria][pregunta_id]["pregunta"]
    print(type(pregunta))
    print(len(pregunta))

    pregunta_lista = pregunta.split()
    print(pregunta_lista)

    preg_primera_parte = []
    preg_segunda_parte = []

    for palabra in pregunta_lista:
        if len(preg_primera_parte) < 8:
            preg_primera_parte.append(palabra)
        else:
            preg_segunda_parte.append(palabra)

    str_preg_primera_parte = " ".join(preg_primera_parte)
    str_preg_segunda_parte = " ".join(preg_segunda_parte)

    print(str_preg_primera_parte)
    print(str_preg_segunda_parte)


    # dibujo la pregunta en la pantalla
    if len(pregunta) < 70:
        dibujar_texto_centrado(pregunta, fuente_pequena, (255, 255, 255), ventana, 500, 150)
    else:
        dibujar_texto_centrado(str_preg_primera_parte, fuente_pequena, (255, 255, 255), ventana, 500, 150)
        dibujar_texto_centrado(str_preg_segunda_parte, fuente_pequena, (255, 255, 255), ventana, 500, 190)

    # respuesta
    opcion_1 = preguntas[categoria][pregunta_id]["opciones"][0]


    dibujar_texto_centrado(opcion_1, fuente_pequena, (0, 0, 0), ventana,500, 285)
    #dibujar_texto(preguntas[categoria][pregunta_id]["opciones"][0], fuente_pequena, (0, 0, 0), ventana,100, 275)
    print(len(preguntas[categoria][pregunta_id]["opciones"][0]))
    dibujar_texto_centrado(preguntas[categoria][pregunta_id]["opciones"][1], fuente_pequena, (0, 0, 0), ventana,
                  500, 350)
    dibujar_texto_centrado(preguntas[categoria][pregunta_id]["opciones"][2], fuente_pequena, (0, 0, 0), ventana,
                  500, 415)
    dibujar_texto_centrado(preguntas[categoria][pregunta_id]["opciones"][3], fuente_pequena, (0, 0, 0), ventana,
                  500, 480)

def dibujar_resp_correcta(categoria, pregunta_id):
    # respuesta
    opcion_1 = preguntas[categoria][pregunta_id]["opciones"][0]

    if preguntas[categoria][pregunta_id]["correcta"] == 0:
        dibujar_texto_centrado(opcion_1, fuente_pequena, verde_brillante, ventana, 500, 285)
    elif preguntas[categoria][pregunta_id]["correcta"] == 1:
        dibujar_texto_centrado(preguntas[categoria][pregunta_id]["opciones"][1], fuente_pequena, verde_brillante, ventana, 500, 350)
    elif preguntas[categoria][pregunta_id]["correcta"] == 2:
        dibujar_texto_centrado(preguntas[categoria][pregunta_id]["opciones"][2], fuente_pequena, verde_brillante, ventana, 500, 415)
    elif preguntas[categoria][pregunta_id]["correcta"] == 3:
        dibujar_texto_centrado(preguntas[categoria][pregunta_id]["opciones"][3], fuente_pequena, verde_brillante, ventana, 500, 480)


def dibujar_letras_jugador1():
    # dibuja las letras sobre los botones
    dibujar_texto("Q", fuente, azul_marino, ventana, 30, 270)
    dibujar_texto("W", fuente, azul_marino, ventana, 30, 335)
    dibujar_texto("E", fuente, azul_marino, ventana, 30, 400)
    dibujar_texto("R", fuente, azul_marino, ventana, 30, 465)

def dibujar_letras_jugador2():
    # dibuja las letras sobre los botones
    dibujar_texto("U", fuente, azul_marino, ventana, (ancho_ventana - 50), 270)
    dibujar_texto("I", fuente, azul_marino, ventana, (ancho_ventana - 50), 335)
    dibujar_texto("O", fuente, azul_marino, ventana, (ancho_ventana - 50), 400)
    dibujar_texto("P", fuente, azul_marino, ventana, (ancho_ventana - 50), 465)

def comprobar_resp_jugador1():
    global respuesta_jugador1
    comprobar_respuesta = True
    while comprobar_respuesta:

        # el jugador presiona una tecla
        respuesta_jugador1 = esperar_jugador()
        print(respuesta_jugador1)

        if respuesta_jugador1 == 0:
            dibujar_texto("Q", fuente, negro, ventana, 30, 270)
            comprobar_respuesta = False
        elif respuesta_jugador1 == 1:
            dibujar_texto("W", fuente, negro, ventana, 30, 335)
            comprobar_respuesta = False
        elif respuesta_jugador1 == 2:
            dibujar_texto("E", fuente, negro, ventana, 30, 400)
            comprobar_respuesta = False
        elif respuesta_jugador1 == 3:
            dibujar_texto("R", fuente, negro, ventana, 30, 465)
            comprobar_respuesta = False

def comprobar_resp_jugador2():
    global respuesta_jugador2
    comprobar_respuesta2 = True
    while comprobar_respuesta2:

        # el jugador  2 presiona una tecla
        respuesta_jugador2 = esperar_jugador()
        print(respuesta_jugador2)

        if respuesta_jugador2 == 11:
            respuesta_jugador2 = 0
            dibujar_texto("U", fuente, negro, ventana, (ancho_ventana - 50), 270)
            comprobar_respuesta2 = False
        elif respuesta_jugador2 == 12:
            respuesta_jugador2 = 1
            dibujar_texto("I", fuente, negro, ventana, (ancho_ventana - 50), 335)
            comprobar_respuesta2 = False
        elif respuesta_jugador2 == 13:
            respuesta_jugador2 = 2
            dibujar_texto("O", fuente, negro, ventana, (ancho_ventana - 50), 400)
            comprobar_respuesta2 = False
        elif respuesta_jugador2 == 14:
            respuesta_jugador2 = 3
            dibujar_texto("P", fuente, negro, ventana, (ancho_ventana - 50), 465)
            comprobar_respuesta2 = False

def resp_correcta_jugador(numero_jugador, puntos_ganados, x, y):

    global puntaje_jugador_1, puntaje_jugador_2

    dibujar_texto("Correcto: sumas " + str(puntos_ganados) + " puntos", fuente_pequena, verde_brillante, ventana, x, y)
    pygame.display.update()
    sonidoCorrecto.play()

    if numero_jugador == 1:
        puntaje_jugador_1 += puntos_ganados
    elif numero_jugador == 2:
        puntaje_jugador_2 += puntos_ganados


def resp_incorrecta_jugador(numero_jugador, x, y):
    global jugador1_acerto, jugador2_acerto
    dibujar_texto("Incorrecto: no sumas puntos", fuente_pequena, amarillo, ventana, x, y)

    if numero_jugador == 1:
        jugador1_acerto = False
    elif numero_jugador == 2:
        jugador2_acerto = False

    pygame.display.update()
    sonidoIncorrecto.play()

# --------------------###################-------------------------------------##############
# funciones del scroll

def jugadorGolpeaMoneda(rectanguloJugador, monedas):
    for moneda in monedas:
        if rectanguloJugador.colliderect(moneda['rect']):
            monedas.remove(moneda)
            return True
    return False

def jugadorGolpeaNube(rectanguloJugador, nubes):
    for nube in nubes:
        if rectanguloJugador.colliderect(nube['rect']):
            #cambia la imagen de la nube
            ventana.blit(nube['superficie2'], nube['rect'])
            return True
    return False

def jugadorGolpeaEdificio(rectanguloJugador, edificios):
    for edificio in edificios:
        if rectanguloJugador.colliderect(edificio['rect']):
            #cambia la imagen del edificio
            ventana.blit(edificio['superficie2'], edificio['rect'])
            return True
    return False
# --------------------###################-------------------------------------##############

def juego_scroll():
    global juegoMultijugador, monedas_jugador_1, monedas_jugador_2, musica_sonando, indice_turno

    if indice_turno == 0:
        if juegoMultijugador == True:
            ventana.blit(indicacion_controles_multijugador_scroll, (0, 0))
            dibujar_texto_centrado('Presiona una tecla para comenzar >>>', fuente_mas_pequena, negro, ventana, 800, 585)
            pygame.display.update()
            esperar_jugador()
        else:
            ventana.blit(indicacion_controles_multijugador_scroll, (0, 0))
            dibujar_texto_centrado('Presiona una tecla para comenzar >>>', fuente_mas_pequena, negro, ventana, 800, 585)
            pygame.display.update()
            esperar_jugador()

    # Muestra la pantalla inicial
    ventana.blit(imagentransicion_carrera, transicion_carreraRect)
    dibujar_texto_centrado('Despegando al próximo aeropuerto...', fuente, negro, ventana, 500, 30)
    #dibujar_texto('Las monedas que consigas se suman a tus puntos', fuente_pequena, azul_marino, ventana, 210, 50)
    dibujar_texto_centrado('Presiona una tecla para avanzar', fuente_pequena, negro, ventana, 500, 490)
    # Detiene la musica
    pygame.mixer.music.stop()
    #cargar nueva cancion
    pygame.mixer.music.load('musicafondo2.wav')

    # inicio la musica
    pygame.mixer.music.play(-1, 0.0)
    pygame.mixer.music.set_volume(0.5)

    pygame.display.update()
    esperar_jugador()

    # subir la imagen de fondo para el scroll
    fondo = pygame.image.load("scroll2.png").convert()

    #fondoRect = fondo.get_rect()
    ancho, alto = ancho_ventana, alto_ventana
    posicion_en_x = 0
    posicion_en_y = 0
    posicion_en_x1 = 0
    posicion_en_y1 = -alto

    # establezco el contador
    contador, texto_timer = 10, '10'.rjust(
        3)  # justifica el texto en la cantidad de "caracteres" que se le da el segundo argumento
    pygame.time.set_timer(pygame.USEREVENT, 1000)  # 1000 milisegundos equivalen a 1 segundo

    # este no es el bucle del juego
    corriendo = True
    while corriendo:
        #monedas
        monedas = []
        cantidad_monedas_1 = 0
        cantidad_monedas_2 = 0

        #obstaculos
        #nubes
        nubes = []
        edificios = []
        jugador1_toco_edificio = False
        jugador2_toco_edificio = False

        # situo a los jugadores en la pantalla
        rectanguloJugador.topleft = (100, alto_ventana - 50)  # jugador 1 a la izquierda
        rectanguloJugador2.topleft = (ancho_ventana - 100, alto_ventana - 50)  # jugador 2 a la derecha

        moverIzquierda = moverDerecha = moverArriba = moverAbajo = False
        moverIzquierda2 = moverDerecha2 = moverArriba2 = moverAbajo2 = False
        contadorAgregarMoneda = 0
        contadorAgregarNube = 0
        contadorAgregarEdificio = 0

        # Detiene la musica
        pygame.mixer.music.stop()
        # cargar nueva cancion
        pygame.mixer.music.load('musicaFondo3.wav')

        # inicio la musica
        pygame.mixer.music.play(-1, 0.0)
        pygame.mixer.music.set_volume(0.5)

        # este es el bucle del juego
        funcionando = True

        while funcionando:

            for evento in pygame.event.get():

                if evento.type == QUIT:
                    cerrar_juego()
                    funcionando = False

                if evento.type == pygame.KEYDOWN:
                    if evento.key == K_ESCAPE:
                        funcionando = False

                    # movimiento jugador 1
                    if evento.key == ord('a'):
                        moverDerecha = False
                        moverIzquierda = True
                    if evento.key == ord('d'):
                        moverIzquierda = False
                        moverDerecha = True
                    if evento.key == ord('w'):
                        moverAbajo = False
                        moverArriba = True
                    if evento.key == ord('s'):
                        moverArriba = False
                        moverAbajo = True
                    if evento.key == pygame.K_SPACE:
                        pausa_despausa_la_musica()

                    if juegoMultijugador == True:

                        # movimento jugador 2
                        if evento.key == K_LEFT:
                            moverDerecha2 = False
                            moverIzquierda2 = True
                        if evento.key == K_RIGHT:
                            moverIzquierda2 = False
                            moverDerecha2 = True
                        if evento.key == K_UP:
                            moverAbajo2 = False
                            moverArriba2 = True
                        if evento.key == K_DOWN:
                            moverArriba2 = False
                            moverAbajo2 = True

                if evento.type == KEYUP:
                    # movimiento jugador 1
                    if evento.key == ord('a'):
                        moverIzquierda = False
                    if evento.key == ord('d'):
                        moverDerecha = False
                    if evento.key == ord('w'):
                        moverArriba = False
                    if evento.key == ord('s'):
                        moverAbajo = False

                    if juegoMultijugador == True:
                        # movimiento jugador 2
                        if evento.key == K_LEFT:
                            moverIzquierda2 = False
                        if evento.key == K_RIGHT:
                            moverDerecha2 = False
                        if evento.key == K_UP:
                            moverArriba2 = False
                        if evento.key == K_DOWN:
                            moverAbajo2 = False

                # timer
                if evento.type == pygame.USEREVENT:
                    contador -= 1
                    texto_timer = str(contador).rjust(3) if contador > 0 else 'Fin!'
                    if contador == 0:
                        funcionando = False

            # definir el scroll de fondo
            posicion_en_y1 += 2
            posicion_en_y += 2
            ventana.blit(fondo, (posicion_en_x, posicion_en_y))
            ventana.blit(fondo, (posicion_en_x1, posicion_en_y1))
            if posicion_en_y > alto:
                posicion_en_y = -alto
            if posicion_en_y1 > alto:
                posicion_en_y1 = -alto


###########------- MONEDAS ---------------------------#####################------------------------------

            # Añade monedas en la parte superior de la pantalla
            contadorAgregarMoneda += 1
            if contadorAgregarMoneda >= tasa_nueva_moneda:
                contadorAgregarMoneda = 0

                nuevaMoneda = {'rect': pygame.Rect(random.randint(0, ancho_ventana - 40), 0 - 40, 40, 40),
                               'velocidad': random.randint(velocidad_min_moneda, velocidad_max_moneda),
                               'superficie': pygame.transform.scale(supMoneda, (40, 40)),
                               }
                monedas.append(nuevaMoneda)

            # Mueve las monedas hacia abajo.
            for moneda in monedas:
                moneda['rect'].move_ip(0, moneda['velocidad'])

            # Elimina los asteroides que han caido por debajo.
            # [:] develve una copia de la lista con todos sus ítems (del primero al último).
            # No puedes agregar o quitar ítems de una lista mientras estás iterando sobre ella. Python puede
            # perder la cuenta de cuál debería ser el próximo valor de la variable comida si el tamaño de la lista
            # asteroides está cambiando

            for moneda in monedas[:]:
                if moneda['rect'].top > alto_ventana:
                    monedas.remove(moneda)

            # Dibuja cada moneda
            for moneda in monedas:
                ventana.blit(moneda['superficie'], moneda['rect'])

            # Verifica si alguna moneda impactó en el jugador.

            if jugadorGolpeaMoneda(rectanguloJugador, monedas):
                cantidad_monedas_1 += 5  # incrementa el puntaje
                sonidoSumaMoneda.play()

            if juegoMultijugador == True:

                if jugadorGolpeaMoneda(rectanguloJugador2, monedas):
                    cantidad_monedas_2 += 5  # incrementa el puntaje
                    sonidoSumaMoneda.play()

###########------- NUBES ---------------------------#####################------------------------------

            # Añade nubes como obstaculos en la parte superior de la pantalla
            contadorAgregarNube += 1

            if contadorAgregarNube >= tasa_nueva_nube:
                contadorAgregarNube = 0
                tamanoNube = random.randint(tamano_min_nube, tamano_max_nube)
                nuevaNube = {
                    'rect': pygame.Rect(random.randint(0, ancho_ventana - tamanoNube), 0 - tamanoNube,
                                        tamanoNube, tamanoNube),
                    'velocidad': 2,  #debe coincidir con la velocidad del scroll
                    'superficie': pygame.transform.scale(imagenNubeObstaculo, (tamanoNube, tamanoNube)),
                    'superficie2': pygame.transform.scale(imagenNubeColision, (tamanoNube, tamanoNube))
                    }
                nubes.append(nuevaNube)

            # Mueve las nubes hacia abajo.
            for nube in nubes:
                nube['rect'].move_ip(0, nube['velocidad'])

            for nube in nubes[:]:
                if nube['rect'].top > alto_ventana:
                    nubes.remove(nube)



            # Verifica si alguna nube impactó en el jugador.

            if jugadorGolpeaNube(rectanguloJugador, nubes):
                if cantidad_monedas_1 > 0:
                    cantidad_monedas_1 -= 1  #   disminuye el puntaje
                    sonidoTrueno.play()

            if juegoMultijugador == True:

                if jugadorGolpeaNube(rectanguloJugador2, nubes):
                    if cantidad_monedas_2 > 0:
                        cantidad_monedas_2 -= 1  # disminuye el puntaje
                        sonidoTrueno.play()


#########------------- EDIFICIOS --------------------###########------------------##################------------

            # Añade edificios como obstaculos en la parte superior de la pantalla
            contadorAgregarEdificio += 1

            if contadorAgregarEdificio >= tasa_nueva_edificio:
                contadorAgregarEdificio = 0
                tamanoEdificio = random.randint(tamano_min_edificio, tamano_max_edificio)
                nuevoEdificio = {
                    'rect': pygame.Rect(random.randint(0, ancho_ventana - tamanoEdificio), 0 - tamanoEdificio,
                                        tamanoEdificio, tamanoEdificio),
                    'velocidad': 2,  # debe coincidir con la velocidad del scroll para aparentar que esta en el suelo o estatico
                    'superficie': pygame.transform.scale(imagenEdificioObstaculo, (tamanoEdificio, tamanoEdificio)),
                    'superficie2': pygame.transform.scale(imagenEdificioColision, (tamanoEdificio, tamanoEdificio))
                }
                edificios.append(nuevoEdificio)

            # Mueve los edificios hacia abajo.
            for edificio in edificios:
                edificio['rect'].move_ip(0, edificio['velocidad'])

            for edificio in edificios[:]:
                if edificio['rect'].top > alto_ventana:
                    edificios.remove(edificio)

            # Dibuja cada nube
            for edificio in edificios:
                ventana.blit(edificio['superficie'], edificio['rect'])

            # Verifica si algun edificio impactó en el jugador.

            if jugadorGolpeaEdificio(rectanguloJugador, edificios):
                jugador1_toco_edificio = True
                #if cantidad_monedas_1 > 0:
                 #   cantidad_monedas_1 -= 1  # disminuye el puntaje
                sonidoGolpeEdificio.play()

            if juegoMultijugador == True:

                if jugadorGolpeaEdificio(rectanguloJugador2, edificios):
                    jugador2_toco_edificio = True
                    #if cantidad_monedas_2 > 0:
                     #   cantidad_monedas_2 -= 1  # disminuye el puntaje
                    sonidoGolpeEdificio.play()


            # Dibuja cada nube luego de los edificios para que parezca q ellos estan en el suelo
            for nube in nubes:
                ventana.blit(nube['superficie'], nube['rect'])


########--------Movimiento jugadores -------------------------###########------------------##################------------

            moneda_jugador1_Rect.topleft = (10, 0)
            ventana.blit(supMoneda_jugador1, moneda_jugador1_Rect)

            if juegoMultijugador == False:

                if jugador1_toco_edificio == False:

                    # Mueve el avion del jugador 1.
                    #al ser hasta cero no deja que escape de la pantalla
                    if moverIzquierda and rectanguloJugador.left > 0:
                        rectanguloJugador.move_ip(-1 * movimiento_jugador, 0)
                    if moverDerecha and rectanguloJugador.right < ancho_ventana:
                        rectanguloJugador.move_ip(movimiento_jugador, 0)
                    if moverArriba and rectanguloJugador.top > 0:
                        rectanguloJugador.move_ip(0, -1 * movimiento_jugador)
                    if moverAbajo and rectanguloJugador.bottom < alto_ventana:
                        rectanguloJugador.move_ip(0, movimiento_jugador)

                else:
                    continue

            if juegoMultijugador == True:

                if jugador1_toco_edificio == False:
                    # Mueve el avion del jugador 1.
                    # al ser hasta cero no deja que escape de la pantalla
                    if moverIzquierda and rectanguloJugador.left > 0:
                        rectanguloJugador.move_ip(-1 * movimiento_jugador, 0)
                    if moverDerecha and rectanguloJugador.right < 483:  # ancho de pantalla sin contar las nubes divisorias
                        rectanguloJugador.move_ip(movimiento_jugador, 0)
                    if moverArriba and rectanguloJugador.top > 0:
                        rectanguloJugador.move_ip(0, -1 * movimiento_jugador)
                    if moverAbajo and rectanguloJugador.bottom < alto_ventana:
                        rectanguloJugador.move_ip(0, movimiento_jugador)

                if jugador2_toco_edificio == False:
                    # Mueve el avion del jugador 2.
                    if moverIzquierda2 and rectanguloJugador2.left > 517: #ancho de pantalla contando las nubes divisorias
                        rectanguloJugador2.move_ip(-1 * movimiento_jugador, 0)
                    if moverDerecha2 and rectanguloJugador2.right < ancho_ventana:
                        rectanguloJugador2.move_ip(movimiento_jugador, 0)
                    if moverArriba2 and rectanguloJugador2.top > 0:
                        rectanguloJugador2.move_ip(0, -1 * movimiento_jugador)
                    if moverAbajo2 and rectanguloJugador2.bottom < alto_ventana:
                        rectanguloJugador2.move_ip(0, movimiento_jugador)

            # Dibuja cantidad de monedas
            dibujar_texto('%s' % (cantidad_monedas_1), fuente_pequena, verde_brillante, ventana, 55, 5)
            # Dibuja el rectángulo del jugador
            ventana.blit(imagenJugador, rectanguloJugador)
            if juegoMultijugador == True:
                moneda_jugador2_Rect = (910, 0)
                ventana.blit(supMoneda_jugador2, moneda_jugador2_Rect)
                dibujar_texto('%s' % (cantidad_monedas_2), fuente_pequena, rojo, ventana, 955,
                              5)
                ventana.blit(imagenJugador2, rectanguloJugador2)

            # dibujo la separacion de la ventana
            if juegoMultijugador == True:
                # ancho de las nubes 28 px
                rectanguloNubesDivisoras.topleft = (485, 0)
                ventana.blit(imagenNubesDivisoras, rectanguloNubesDivisoras)

            # timer
            dibujar_texto(texto_timer, fuente_timer, negro, ventana, 480, 10)

            pygame.display.update()
            reloj.tick(60)

        #sumo las monedas al global del jugador
        monedas_jugador_1 += cantidad_monedas_1
        if juegoMultijugador == True:
            monedas_jugador_2 += cantidad_monedas_2

        juego_preguntas()

# --------------------###################-------------------------------------##############


def juego_preguntas():
    global esperando_respuesta_jugador, esperando_respuesta_jugador2, indice_turno, juegoMultijugador
    global monedas_jugador_1, monedas_jugador_2, puntaje_jugador_1, puntaje_jugador_2, lista_preguntas_aeronauticas, lista_preguntas_viajes, musica_sonando, respuesta_jugador1, respuesta_jugador2
    global jugador1_acerto, jugador2_acerto
    # Muestra la pantalla inicial
    ventana.blit(imagentransicion_trivia, transicion_triviaRect)


    # dibujo puntaje y cantidad de items (monedas, etc)
    #dibujar_texto("Jugador 1: ", fuente_pequena, azul_marino, ventana, 10, 10)
    dibujar_texto("Puntos: " + str(puntaje_jugador_1), fuente_pequena, verde_brillante, ventana, 20, 20)
    dibujar_texto('%s' % (monedas_jugador_1), fuente_pequena, verde_brillante, ventana, 80, 50)
    moneda_jugador1_Rect.topleft = (30, 50)
    ventana.blit(supMoneda_jugador1, moneda_jugador1_Rect)

    # Detiene la musica
    pygame.mixer.music.stop()
    # cargar nueva cancion
    pygame.mixer.music.load('musicaFondo2.wav')

    # inicio la musica
    pygame.mixer.music.play(-1, 0.0)
    pygame.mixer.music.set_volume(0.2)

    if juegoMultijugador == True:

        dibujar_texto("Puntos: " + str(puntaje_jugador_2), fuente_pequena, rojo, ventana, 830, 20)
        dibujar_texto('%s' % (monedas_jugador_2), fuente_pequena, rojo, ventana, 900, 55)
        moneda_jugador2_Rect.topleft = (850, 50)
        ventana.blit(supMoneda_jugador2, moneda_jugador2_Rect)


    # Detiene el juego y muestra indicaciones para el jugador

    dibujar_texto('Aterrizando...', fuente, negro, ventana, 400, 10)
    dibujar_texto_centrado('Presiona T para AVANZAR a la trivia o M para SALIR de la partida', fuente_pequena, negro, ventana,
                           (ancho_ventana/2), 580)

    pygame.display.update()

    comprobando = True
    while comprobando:

        jugar_trivia = esperar_jugador()

        # compara con la funcion que defini de eventos

        # la letra T retorna 8
        if jugar_trivia == 8:
            comprobando = False


        # la letra M retorna como 9
        elif jugar_trivia == 9:

            if juegoMultijugador == True:
                juegoMultijugador = False
            menu_principal()
            comprobando = False


    reloj.tick(15)

    preguntando = True
    while preguntando:

        jugador1_acerto = True
        jugador2_acerto = True

        # Detiene la musica
        pygame.mixer.music.stop()
        # cargar nueva cancion
        pygame.mixer.music.load('musicaFondo5cortado.wav')

        # inicio la musica
        pygame.mixer.music.play(-1, 0.0)

        # bucle del juego
        funcionando = True

        while funcionando:

            ventana.fill(gris)
            ventana.blit(fondo_preguntas, fondo_preguntasRect)

            for evento in pygame.event.get():

                if evento.type == pygame.QUIT:
                    cerrar_juego()
                    funcionando = False
                if evento.type == pygame.KEYDOWN:
                    if evento.key == pygame.K_ESCAPE:
                        funcionando = False
                    if evento.key == pygame.K_SPACE:
                        pausa_despausa_la_musica()

            if juegoMultijugador == True:


                # dibuja las letras sobre los botones
                dibujar_letras_jugador1()
                dibujar_letras_jugador2()

                # dibujo puntaje y cantidad de items (monedas, etc)
                dibujar_texto("Puntaje: " + str(puntaje_jugador_1), fuente_pequena, azul_marino, ventana, 20, 570)

                dibujar_texto_centrado("Jugador/a 1, indicá tu respuesta presionando una letra", fuente_pequena,
                                       gris_azulado, ventana, 500, 30)



                dibujar_texto("Puntaje: " + str(puntaje_jugador_2), fuente_pequena, azul_marino, ventana,
                              780,
                              570)

            # elegir la pregunta segun el turno
            # si el turno es 0, se accede a la lista en ese indice
            if len(lista_preguntas_aeronauticas) > indice_turno:
                num_de_pregunta_aeronautica = lista_preguntas_aeronauticas[indice_turno]

                # dibuja la pregunta y sus respuestas en la pantalla, y el turno de juego
                dibujar_pregunta("aeronautica", num_de_pregunta_aeronautica, indice_turno)
                pygame.display.update()

                # cambio la condicion de la bandera de esperar al jugador
                esperando_respuesta_jugador = True
                esperando_respuesta_jugador2 = True

            else:

                fin_juego = True
                print("cambio fin del juego y ahora es : ")
                print(fin_juego)
                break

            if juegoMultijugador == True:

                # creo la condicion para saber si la respuesta es correcta o no
                if esperando_respuesta_jugador == True:
                    comprobar_resp_jugador1()

                ventana.blit(imagenFondo_trivia_arriba, (0, 0))
                dibujar_texto_centrado("Jugador/a 2, indicá tu respuesta presionando una letra", fuente_pequena,
                                       gris_azulado, ventana, 500, 30)

                pygame.display.update()

                esperando_respuesta_jugador = False
                # creo la condicion para saber si la respuesta es correcta o no
                if esperando_respuesta_jugador2 == True:
                    comprobar_resp_jugador2()
                    pygame.display.update()
                    esperando_respuesta_jugador2 = False

                if esperando_respuesta_jugador == False and esperando_respuesta_jugador2 == False:

                    # compara resultado de la resp del jugador 1 con la correcta
                    if resolver(preguntas, "aeronautica", num_de_pregunta_aeronautica, respuesta_jugador1) == True:
                        resp_correcta_jugador(1, 100, 20, 530)

                    else:
                        resp_incorrecta_jugador(1, 20, 530)

                    # comprueba la respuesta del jugador 2 con la correcta

                    if resolver(preguntas, "aeronautica", num_de_pregunta_aeronautica, respuesta_jugador2) == True:
                        resp_correcta_jugador(2, 100, 620, 530)

                    else:
                        resp_incorrecta_jugador(2, 620, 530)
                else:
                    continue

                ventana.blit(imagenFondo_trivia_arriba, (0, 0))
                dibujar_resp_correcta("aeronautica", num_de_pregunta_aeronautica)
                dibujar_texto_centrado("Ahora presionen la tecla S para continuar", fuente_pequena, negro, ventana, 500, 30)

                pygame.display.update()

                # caso 1 .. solo el jugador 1 fallo

                if jugador1_acerto == False and jugador2_acerto == True:

                    ventana.blit(fondo_preguntas, fondo_preguntasRect)

                    dibujar_texto_centrado("Jugador/a 1, fallaste", fuente_pequena, gris_azulado, ventana, 500, 20)
                    dibujar_texto_centrado("pero tenes revancha contestando una pregunta de viajes", fuente_pequena,
                        gris_azulado, ventana, 500, 50)

                    # dibuja las letras sobre los botones
                    dibujar_letras_jugador1()
                    dibujar_texto("Puntaje: " + str(puntaje_jugador_1), fuente_pequena, azul_marino,
                                  ventana,
                                  20, 570)

                    # dibuja las letras sobre los botones
                    dibujar_letras_jugador2()
                    dibujar_texto("Puntaje: " + str(puntaje_jugador_2), fuente_pequena, azul_marino,
                                  ventana, 780, 570)

                    responder_viajes = True
                    while responder_viajes:

                        avanzar_a_preg_viajes = esperar_jugador()
                        # S es 4
                        if avanzar_a_preg_viajes == 4:
                            responder_viajes = False

                    if len(lista_preguntas_viajes) > indice_turno:
                        num_de_pregunta_viajes = lista_preguntas_viajes[indice_turno]

                        # dibuja la pregunta y sus respuestas en la pantalla, y el turno de juego
                        dibujar_pregunta("viajes", num_de_pregunta_viajes, indice_turno)
                        pygame.display.update()

                    # cambio la condicion de la bandera de esperar al jugador
                    esperando_respuesta_jugador = True

                    # creo la condicion para saber si la respuesta es correcta o no
                    if esperando_respuesta_jugador == True:
                        comprobar_resp_jugador1()

                        pygame.display.update()
                        esperando_respuesta_jugador = False
                    else:
                        continue

                    if esperando_respuesta_jugador == False:  # or esperando_respuesta_jugador2 == False:

                        # compara resultado de la resp del jugador 1 con la correcta
                        if resolver(preguntas, "viajes", num_de_pregunta_viajes, respuesta_jugador1) == True:
                           resp_correcta_jugador(1, 50, 20, 530)

                        else:
                            resp_incorrecta_jugador(1, 20, 530)


                    else:
                        continue

                    dibujar_resp_correcta("viajes", num_de_pregunta_viajes)
                    pygame.display.update()

                #caso 2 - jugador 2 erro, 1 acerto
                elif jugador2_acerto == False and jugador1_acerto == True:

                    ventana.blit(fondo_preguntas, fondo_preguntasRect)
                    dibujar_texto_centrado("Jugador/a 2, fallaste pero tenes revancha",
                                           fuente_pequena,
                                           gris_azulado, ventana, 500, 30)

                    # dibuja las letras sobre los botones
                    dibujar_letras_jugador1()
                    dibujar_texto("Puntaje: " + str(puntaje_jugador_1), fuente_pequena, azul_marino,
                                  ventana,
                                  20, 570)

                    # dibuja las letras sobre los botones
                    dibujar_letras_jugador2()
                    dibujar_texto("Puntaje: " + str(puntaje_jugador_2), fuente_pequena, azul_marino,
                                  ventana, 780, 570)

                    responder_viajes = True
                    while responder_viajes:

                        avanzar_a_preg_viajes = esperar_jugador()
                        # S es 4
                        if avanzar_a_preg_viajes == 4:
                            responder_viajes = False

                    if len(lista_preguntas_viajes) > indice_turno:
                        num_de_pregunta_viajes = lista_preguntas_viajes[indice_turno]

                        # dibuja la pregunta y sus respuestas en la pantalla, y el turno de juego
                        dibujar_pregunta("viajes", num_de_pregunta_viajes, indice_turno)
                        pygame.display.update()


                    esperando_respuesta_jugador2 = True
                    # creo la condicion para saber si la respuesta es correcta o no
                    if esperando_respuesta_jugador2 == True:
                        comprobar_resp_jugador2()

                        pygame.display.update()
                        esperando_respuesta_jugador2 = False

                    if esperando_respuesta_jugador2 == False:

                        # comprueba la respuesta del jugador 2 con la correcta

                        if resolver(preguntas, "viajes", num_de_pregunta_viajes, respuesta_jugador2) == True:

                            resp_correcta_jugador(2, 50, 620, 530)

                        else:
                            resp_incorrecta_jugador(2, 620, 530)

                    else:
                        continue

                    dibujar_resp_correcta("viajes", num_de_pregunta_viajes)
                    pygame.display.update()

                # caso 3 - ambos jugadores fallan
                elif jugador2_acerto == False and jugador1_acerto == False:

                    ventana.blit(fondo_preguntas, fondo_preguntasRect)

                    dibujar_texto_centrado("Fallaron. Pero tienen revancha...",
                                           fuente_pequena,
                                           gris_azulado, ventana, 500, 20)
                    dibujar_texto_centrado("Jugador/a 1, contestas primero",
                                           fuente_pequena,
                                           gris_azulado, ventana, 500, 50)
                    # dibuja las letras sobre los botones
                    dibujar_letras_jugador1()
                    dibujar_texto("Puntaje: " + str(puntaje_jugador_1), fuente_pequena, azul_marino,
                                  ventana,
                                  20, 570)

                    # dibuja las letras sobre los botones
                    dibujar_letras_jugador2()
                    dibujar_texto("Puntaje: " + str(puntaje_jugador_2), fuente_pequena, azul_marino,
                                  ventana, 780, 570)

                    responder_viajes = True
                    while responder_viajes:

                        avanzar_a_preg_viajes = esperar_jugador()
                        # S es 4
                        if avanzar_a_preg_viajes == 4:
                            responder_viajes = False

                    if len(lista_preguntas_viajes) > indice_turno:
                        num_de_pregunta_viajes = lista_preguntas_viajes[indice_turno]

                        # dibuja la pregunta y sus respuestas en la pantalla, y el turno de juego
                        dibujar_pregunta("viajes", num_de_pregunta_viajes, indice_turno)
                        pygame.display.update()


                    # cambio la condicion de la bandera de esperar al jugador
                    esperando_respuesta_jugador = True

                    # creo la condicion para saber si la respuesta es correcta o no
                    if esperando_respuesta_jugador == True:
                        comprobar_resp_jugador1()

                        pygame.display.update()
                        esperando_respuesta_jugador = False
                    else:
                        continue

                    ventana.blit(imagenFondo_trivia_arriba, (0, 0))
                    dibujar_texto_centrado("Jugador/a 2, ahora contestas vos",
                                           fuente_pequena,
                                           gris_azulado, ventana, 500, 30)
                    pygame.display.update()

                    esperando_respuesta_jugador2 = True
                    # creo la condicion para saber si la respuesta es correcta o no
                    if esperando_respuesta_jugador2 == True:

                        comprobar_resp_jugador2()
                        pygame.display.update()
                        esperando_respuesta_jugador2 = False


                    #if esperando_respuesta_jugador == False:  # or
                    if esperando_respuesta_jugador2 == False:

                        ventana.blit(imagenFondo_trivia_arriba, (0, 0))

                        # compara resultado de la resp del jugador 1 con la correcta
                        if resolver(preguntas, "viajes", num_de_pregunta_viajes, respuesta_jugador1) == True:
                            resp_correcta_jugador(1, 100, 20, 530)


                        else:
                            resp_incorrecta_jugador(1, 20, 530)


                        # comprueba la respuesta del jugador 2 con la correcta

                        if resolver(preguntas, "viajes", num_de_pregunta_viajes, respuesta_jugador2) == True:
                            resp_correcta_jugador(2, 50, 620, 530)

                        else:
                           resp_incorrecta_jugador(2, 620, 530)


                    else:
                        continue

                    dibujar_resp_correcta("viajes", num_de_pregunta_viajes)
                    pygame.display.update()


            else:
                print("modo solitario")

                # dibuja las letras sobre los botones
                dibujar_letras_jugador1()

                # dibujo puntaje y cantidad de items (monedas, etc)
                dibujar_texto("Puntaje: " + str(puntaje_jugador_1), fuente_pequena, azul_marino, ventana, 20, 570)

                dibujar_texto_centrado("Presiona una tecla para elegir cuál es la opción correcta", fuente_pequena, gris_azulado, ventana, 500, 30)
                pygame.display.update()

                # creo la condicion para saber si la respuesta es correcta o no
                if esperando_respuesta_jugador == True:

                    comprobar_resp_jugador1()
                    pygame.display.update()
                    esperando_respuesta_jugador = False

                    # compara resultado de la resp del jugador 1 con la correcta
                    if resolver(preguntas, "aeronautica", num_de_pregunta_aeronautica, respuesta_jugador1) == True:

                        resp_correcta_jugador(1, 100, 330, 530)

                    else:
                        ventana.blit(imagenFondo_trivia_arriba, (0, 0))
                        dibujar_texto_centrado("Presiona S para avanzar", fuente_pequena, negro, ventana, 500,
                                               30)

                        resp_incorrecta_jugador(1, 330, 530)

                dibujar_resp_correcta("aeronautica", num_de_pregunta_aeronautica)
                pygame.display.update()


                if jugador1_acerto == False:

                    ventana.blit(fondo_preguntas, fondo_preguntasRect)

                    # dibuja las letras sobre los botones
                    dibujar_letras_jugador1()
                    dibujar_texto("Puntaje: " + str(puntaje_jugador_1), fuente_pequena, azul_marino, ventana,
                                  20, 570)

                    responder_viajes = True
                    while responder_viajes:

                        avanzar_a_preg_viajes = esperar_jugador()
                        # S es 4
                        if avanzar_a_preg_viajes == 4:
                            responder_viajes = False

                    if len(lista_preguntas_viajes) > indice_turno:
                        num_de_pregunta_viajes = lista_preguntas_viajes[indice_turno]

                        # dibuja la pregunta y sus respuestas en la pantalla, y el turno de juego
                        dibujar_pregunta("viajes", num_de_pregunta_viajes, indice_turno)

                        ventana.blit(imagenFondo_trivia_arriba, (0, 0))
                        dibujar_texto_centrado("Fallaste, pero tenes revancha", fuente_pequena, gris_azulado, ventana,
                                               500,
                                               30)

                        pygame.display.update()

                        # cambio la condicion de la bandera de esperar al jugador
                        esperando_respuesta_jugador = True

                        # creo la condicion para saber si la respuesta es correcta o no
                        if esperando_respuesta_jugador == True:
                            comprobar_resp_jugador1()

                            pygame.display.update()

                            esperando_respuesta_jugador = False

                            # compara resultado de la resp del jugador 1 con la correcta
                            if resolver(preguntas, "viajes", num_de_pregunta_viajes, respuesta_jugador1) == True:
                                resp_correcta_jugador(1, 50, 330, 530)

                            else:
                                resp_incorrecta_jugador(1, 330, 530)

                        dibujar_resp_correcta("viajes", num_de_pregunta_viajes)
                        pygame.display.update()


            # vuelvo al estado inicial la bandera
            jugador1_acerto = True
            jugador2_acerto = True

            ventana.blit(imagenFondo_trivia_arriba, (0, 0))
            dibujar_texto_centrado("Ahora presiona la tecla S para despegar al próximo aeropuerto", fuente_pequena, negro, ventana, 500,
                          30)

            # dibujo puntaje y cantidad de items (monedas, etc)

            pygame.display.update()

            # sumo un turno para la proxima pregunta
            indice_turno += 1
            print("turno numero: ")
            print(indice_turno)

            comprobar = True
            while comprobar:

                continuar = esperar_jugador()

                print("S es 4 : ")
                print(continuar)

                if continuar == 4:
                    mostrando_correcto_incorrecto = False
                    comprobar = False



            if len(lista_preguntas_aeronauticas) > indice_turno:
                juego_scroll()

        ventana.blit(logo, logoRect)
        # Detiene la musica
        pygame.mixer.music.stop()
        # cargar nueva cancion
        pygame.mixer.music.load('musicaFondo1.wav')
        # inicio la musica
        pygame.mixer.music.play(-1, 0.0)

        #sonido ganador
        sonidoJuegoTerminado.play()



        puntaje_jugador_1 += monedas_jugador_1


        if juegoMultijugador == True:

            dibujar_texto("Puntaje Total Jugador/a 1: " + str(puntaje_jugador_1), fuente_pequena, azul_marino, ventana,
                          50, 470)

            puntaje_jugador_2 += monedas_jugador_2
            dibujar_texto("Puntaje Total Jugador/a 2: " + str(puntaje_jugador_2), fuente_pequena, azul_marino, ventana,
                          570, 470)
            if puntaje_jugador_1 > puntaje_jugador_2:
                dibujar_texto_centrado("FIN DEL JUEGO - Jugador/a 1 GANASTE", fuente, negro, ventana, 500, 420)
                #dibujar_texto_centrado("Jugador/a 1 GANASTE", fuente_pequena, azul_marino, ventana, 500, 530)
            elif puntaje_jugador_1 == puntaje_jugador_2:
                dibujar_texto_centrado("FIN DEL JUEGO - Es un empate", fuente, negro, ventana, 500, 420)
                #dibujar_texto_centrado("Es un empate", fuente_pequena, azul_marino, ventana, 500, 530)
            else:
                dibujar_texto_centrado("FIN DEL JUEGO - Jugador/a 2 GANASTE", fuente, negro, ventana, 500, 420)
                #dibujar_texto_centrado("Jugador/a 2 GANASTE", fuente_pequena, azul_marino, ventana, 500, 530)
        else:
            dibujar_texto_centrado("Puntaje Total Jugador/a 1: " + str(puntaje_jugador_1), fuente_pequena, azul_marino,
                                   ventana, 500, 500)
            dibujar_texto_centrado("FIN DEL JUEGO", fuente, negro, ventana, 500, 420)

        dibujar_texto_centrado("Presioná M para volver al menú", fuente_pequena, negro, ventana, 500, 570)

        pygame.display.update()

        jugando = True
        while jugando:

            jugar_de_nuevo = esperar_jugador()
            # compara con la funcion que defini de eventos

            # la letra M retorna como 9
            if jugar_de_nuevo == 9:

                if juegoMultijugador == True:
                    juegoMultijugador = False

                menu_principal()

        pygame.display.update()
        reloj.tick(20)


# --------------------###################-------------------------------------##############

def menu_principal():
    global juegoMultijugador, fin_juego, lista_preguntas_aeronauticas, lista_preguntas_viajes, indice_turno
    global monedas_jugador_1, monedas_jugador_2, puntaje_jugador_1, puntaje_jugador_2

    # reinicio el estado (las variables) del juego a cero, para iniciar una nueva partida
    fin_juego = False
    indice_turno = 0
    puntaje_jugador_1 = 0
    puntaje_jugador_2 = 0
    monedas_jugador_1 = 0
    monedas_jugador_2 = 0

    # escojo las preguntas para esta partida
    lista_preguntas_aeronauticas = crear_lista_preguntas_cuestionario(preguntas, "aeronautica")
    print("corroborando lista de preguntas de aeronautica para este turno")
    print(lista_preguntas_aeronauticas)

    lista_preguntas_viajes = crear_lista_preguntas_cuestionario(preguntas, "viajes")
    print("corroborando lista de preguntas de viajes para este turno")
    print(lista_preguntas_viajes)

    # Muestra la pantalla del inicial
    ventana.blit(logo, logoRect)
    dibujar_texto('Indicá la cantidad de jugadores:', fuente, azul_marino,
                  ventana, (ancho_ventana / 3) - 100, 500)
    dibujar_texto('Presiona 1 (uno) o 2 (dos)', fuente, azul_marino,
                  ventana, (ancho_ventana / 3) - 50, 550)
    pygame.display.update()

    #inicio la musica
    pygame.mixer.music.play(-1, 0.0)

    menu = True
    while menu:

        cantidad_jugadores = esperar_jugador()

        print("cantidad de jugadores")
        print(cantidad_jugadores)

        # compara con la funcion que defini de eventos
        # el 1 retorna 5
        if cantidad_jugadores == 5:
            juegoMultijugador = False
            juego_scroll()
            menu = False

        # el 2 retorna como 6
        elif cantidad_jugadores == 6:
            juegoMultijugador = True
            juego_scroll()
            menu = False

        # el 2 retorna como 6
        elif cantidad_jugadores == 10:
            juegoMultijugador = True
            menu = False


    pygame.display.update()
    reloj.tick(15)


# --------------------###################-------------------------------------##############
# iniciar pygame
pygame.init()

# reloj
reloj = pygame.time.Clock()

# nombre y caracteristicas de la ventana / proyecto
pygame.display.set_caption('AEROPOSTA')
ancho_ventana = 1000
alto_ventana = 600
ventana = pygame.display.set_mode((ancho_ventana, alto_ventana), 0, 32)
#oculto el mouse en la ventana
pygame.mouse.set_visible(False)

# colores
gris = (148, 152, 154)
gris_azulado = (217, 229, 245)
azul_marino = (0, 106, 151)
celeste = (128, 211, 247)
negro = (0, 0, 0)
rojo = (187, 24, 19)
verde_brillante = (5, 129, 8)
verde_claro = (95, 243, 80)
amarillo = (255, 250, 60)

# establece las fuentes
fuente = pygame.font.SysFont(None, 48)
fuente_pequena = pygame.font.SysFont("Airport.otf", 38)
fuente_mas_pequena = pygame.font.SysFont(None, 25)
fuente_timer = pygame.font.SysFont('Consolas', 30)

juegoMultijugador = False
musica_sonando = True

respuesta_jugador1 = 4
respuesta_jugador2 = 4

# llevar el puntaje de cada jugador
puntaje_jugador_1 = 0
puntaje_jugador_2 = 0

monedas_jugador_1 = 0
monedas_jugador_2 = 0


#fondo transición trivia
transicion_trivia = pygame.image.load("AvionAterriza.png")
imagentransicion_trivia = pygame.transform.scale(transicion_trivia, (1000, 600))
transicion_triviaRect = imagentransicion_trivia.get_rect()

#fondo transición carrera
transicion_carrera = pygame.image.load("AvionDespega.png")
imagentransicion_carrera = pygame.transform.scale(transicion_carrera, (1000, 600))
transicion_carreraRect = imagentransicion_carrera.get_rect()

#imagen fondo arriba trivia
imagenFondo_trivia_arriba = pygame.image.load("fondArribaTrivia.png")

#imagen de los controles
#indicacion_controles_solitario_scroll = pygame.image.load("controles.png")
indicacion_controles_multijugador_scroll = pygame.image.load("PantallaInstruccionesMultijugadorScroll.png")

#establece la musica de inicio
musicaFondo = pygame.mixer.music.load('musicafondo1.wav')

# establece los sonidos del juego
sonidoJuegoTerminado = pygame.mixer.Sound('aplausos.wav')
sonidoSumaMoneda = pygame.mixer.Sound('moneda3.wav')
sonidoTrueno = pygame.mixer.Sound('trueno1.wav')
sonidoCorrecto = pygame.mixer.Sound('sonidoCorrecto.wav')
sonidoIncorrecto = pygame.mixer.Sound('sonidoIncorrecto.wav')
sonidoGolpeEdificio = pygame.mixer.Sound('golpeEdificio.wav')




# --------------------###################-------------------------------------##############

# variables del juego de scroll

#monedas
tasa_nueva_moneda = 15
velocidad_max_moneda = 8
velocidad_min_moneda = 5
cantidad_monedas_1 = 0
cantidad_monedas_2 = 0

#OBSTACULOS

#nubes
tasa_nueva_nube = 60
tamano_min_nube = 60
tamano_max_nube = 80

#edificios
tasa_nueva_edificio = 90
tamano_min_edificio = 80
tamano_max_edificio = 120


#jugador
movimiento_jugador = 5
#tiempo = 0

# establece las imagenes del jugador
imagenJugador = pygame.image.load('avion1.png')
rectanguloJugador = pygame.Rect(0, 0, 65, 45)

# segundo jugador
imagenJugador2 = pygame.image.load('avion2.png')
rectanguloJugador2 = pygame.Rect(0, 0, 65, 45)

# establece las imagenes de las nubes divisoras de la pantalla
imagenNubesDivisoras = pygame.image.load('NubesArrayArreglo.png')
rectanguloNubesDivisoras = pygame.Rect(0, 0, 65, 45)


# establece las imagenes de la nube (obstaculo)
imagenNubeObstaculo = pygame.image.load('nubeObstaculo.png')
rectanguloNubeObstaculo = pygame.Rect(0, 0, 65, 45)

# establece las imagenes de la nube (obstaculo)
imagenNubeColision = pygame.image.load('NubeObstaculo2.png')
rectanguloNubeColision = pygame.Rect(0, 0, 65, 45)

# establece las imagenes del edificio (obstaculo)
imagenEdificioObstaculo = pygame.image.load('EdificioObstaculo.png')
rectanguloEdificioObstaculo = pygame.Rect(0, 0, 65, 45)

imagenEdificioColision = pygame.image.load('EdificiosColision.png')
rectanguloEdificioColision = pygame.Rect(0, 0, 65, 45)


# establece las imagenes de las monedas
supMoneda = pygame.image.load("moneda.png")
monedaRect = supMoneda.get_rect()

# establece las imagenes de las monedas
supMoneda_jugador1 = pygame.image.load("moneda.png")
moneda_jugador1_Rect = supMoneda_jugador1.get_rect()

# establece las imagenes de las monedas
supMoneda_jugador2 = pygame.image.load("moneda.png")
moneda_jugador2_Rect = supMoneda_jugador2.get_rect()

# primer fondo con logo
logo = pygame.image.load("aeroposta-fondo-logo.png")
logoRect = logo.get_rect()

# --------------------###################-------------------------------------##############

# variables del juego de trivia


# defini el diccionario donde se almacenan las preguntas por categoria, con sus opciones y la respuesta correcta
preguntas = {
    "aeronautica": {
        1: {
            "pregunta": "¿Qué instrumento se usa para medir la temperatura?",
            "opciones": {
                0: "Anemómetro",
                1: "Termómetro",
                2: "Hidrómetro",
                3: "Amperímetro"
            },
            "correcta": 1
        },
        2: {
            "pregunta": "¿Cuáles son los sistemas de control de vuelo primarios, esenciales para el control del avión?",
            "opciones": {
                0: "Elevador - Alerón – Timón de Dirección",
                1: "Elevador - Flaps - Aletas Compensadoras",
                2: "Timón - Flaps - Elevador",
                3: "Flaps - Slats - Elevador"
            },
            "correcta": 0
        },
        3: {
            "pregunta": "¿Pasados cuántos días sin actividad de vuelo, un Piloto Privado de Avión, debe ser readaptado por un Instructor?",
            "opciones": {
                0: "30 días",
                1: "45 días",
                2: "60 días",
                3: "No es necesario readaptarse"
            },
            "correcta": 0
        },
        4: {
            "pregunta": "Dados los siguientes datos: distancia 7 millas náuticas; tiempo 4 minutos. Determinar la velocidad terrestre:",
            "opciones": {
                0: "10.5 KT",
                1: "530 KT",
                2: "105 KT",
                3: "150 KT"
            },
            "correcta": 2
        },
        5: {
            "pregunta": "Si una aeronave debe realizar un Descenso de emergencia, activara su transpondedor en:",
            "opciones": {
                0: "7600",
                1: "7500",
                2: "7400",
                3: "7700"
            },
            "correcta": 3
        },
        6: {
            "pregunta": "En el ciclo OTTO la combustion se realiza a:",
            "opciones": {
                0: "Volumen Constante",
                1: "Presion Constante",
                2: "Volumen y Presion Constante",
                3: "Ninguna es Correcta"
            },
            "correcta": 0
        },
        7: {
            "pregunta": "El piloto controla la relacion aire-combustible con:",
            "opciones": {
                0: "el acelerador",
                1: "la presion del multiple",
                2: "el control de la mezcla",
                3: "el calefactor del carburador"
            },
            "correcta": 0
        },
        8: {
            "pregunta": "Dejar encendido el aire caliente al carburador mientras se realiza el despegue:",
            "opciones": {
                0: "empobrece la mezcla para mas potencia en el despegue",
                1: "incrementa la carrera de despegue",
                2: "reduce la distancia de despegue",
                3: "enriquece la mezcla para potencia en el despegue"
            },
            "correcta": 1
        },
        9: {
            "pregunta": "Aplicar aire caliente al carburador:",
            "opciones": {
                0: "no afecta a la mezcla",
                1: "empobrece la mezcla aire-combustible",
                2: "empobrece la capacidad de frenado",
                3: "enriquece la mezcla aire-combustible"
            },
            "correcta": 3
        },
        10: {
            "pregunta": "¿Qué instrumentos quedaran inoperativos si se bloquea el tubo pitot?",
            "opciones": {
                0: "Altimetro",
                1: "Termómetro",
                2: "Velocimetro",
                3: "Variometro"
            },
            "correcta": 2
        },
    },
    "viajes": {
        1: {
            "pregunta": "¿En qué provincia se hace el festival de la cerveza 'october fest'?",
            "opciones": {
                0: "General Belgrano",
                1: "Mar del Plata",
                2: "Neuquén",
                3: "General Roca"
            },
            "correcta": 0
        },
        2: {
            "pregunta": "¿Dónde jugaron un 'partido' de tenis Rafael Nadal y Novak Djokovic en 2013, para promocionar el país?",
            "opciones": {
                0: "Cataratas del Iguazú",
                1: "Glaciar Perito Moreno",
                2: "Quebrada de Humahuaca",
                3: "Esteros del Iberá"
            },
            "correcta": 1
        },
        3: {
            "pregunta": "¿En qué provincia se encuentra los viñedos ubicados a mayor altitud?",
            "opciones": {
                0: "San Juan",
                1: "Salta",
                2: "Mendoza",
                3: "Catamarca"
            },
            "correcta": 0
        },
        4: {
            "pregunta": "¿Qué ruta nacional une Argentina y Chile a través del paso Los libertadores?",
            "opciones": {
                0: "Ruta nacional 3",
                1: "Ruta nacional 40",
                2: "Ruta nacional 7",
                3: "Ruta nacional 52"
            },
            "correcta": 2
        },
        5: {
            "pregunta": "¿En cuál de las siguientes provincias hay más parques nacionales?",
            "opciones": {
                0: "Misiones",
                1: "Mendoza",
                2: "Neuquén",
                3: "Santa Cruz"
            },
            "correcta": 3
        },
        6: {
            "pregunta": "¿Cuál de estas maravillas del mundo se encuentra en Argentina?",
            "opciones": {
                0: "Montaña de mesa",
                1: "Isla Jeju",
                2: "Cataratas del Iguazú",
                3: "Amazonia"
            },
            "correcta": 2
        },
        7: {
            "pregunta": "¿De qué país se independizo Argentina?",
            "opciones": {
                0: "España",
                1: "Reino Unido",
                2: "Portugal",
                3: "Francia"
            },
            "correcta": 0
        },
        8: {
            "pregunta": "¿Cuándo se independizó Argentina?",
            "opciones": {
                0: "9 de Julio de 1816",
                1: "4 de Junio de 1749",
                2: "25 de Mayo de 1810",
                3: "14 de Julio de 1789"
            },
            "correcta": 0
        },
        9: {
            "pregunta": "¿Cuál es el ícono arquitectonico mas representativo de Buenos Aires?",
            "opciones": {
                0: "La Casa Rosada",
                1: "El Obelisco",
                2: "La Catedral Metropolitana de Buenos Aires",
                3: "El Teatro Colón"
            },
            "correcta": 1
        },
        10: {
            "pregunta": "¿Cómo se autedenomino la dictadura militar de los 70?",
            "opciones": {
                0: "Reorganizacion Nacional Argentina",
                1: "Alianza Nacional Militar Argentina",
                2: "Gobierno Nacional Militar",
                3: "Proceso de Reorganizacion Nacional"
            },
            "correcta": 3
        },
    }
}

# fondo de las preguntas
fondo_preguntas = pygame.image.load("fondo-preguntas.png")
fondo_preguntasRect = fondo_preguntas.get_rect()

# estado de los jugadores
esperando_respuesta_jugador = False
esperando_respuesta_jugador2 = False

# turno de juego (va a mostrar el numero de indice de la lista de preguntas que ya seleccionamos)
indice_turno = 0

jugador1_acerto = True
jugador2_acerto = True


lista_preguntas_aeronauticas = []
# print("corroborando lista de preguntas de aeronautica para este turno")
# print(lista_preguntas_aeronauticas)

lista_preguntas_viajes = []
# print("corroborando lista de preguntas de viajes para este turno")
# print(lista_preguntas_viajes)

# --------------------###################-------------------------------------##############


menu_principal()
